define_geometry(moving_sphere)
    at(0, sin(arg.t), 0)
    scale(1 + abs(sin(arg.t)))
    sd_sphere(1);

define_geometry(room, vec3 size, vec2 door, float thick)
at(0,size.y,0)
union {
    difference {
        onionize(thick) sd_box(size);
        at(0, -door.y/2, -size.z + thick) sd_box(vec3(door, thick*2));
        at(0,0,-5) sd_box(vec3(10,3,3));
        at(0,0,5) sd_box(vec3(10,3,3));
    };
};

camera {
    marker(room, 0,0,0);
    marker(upper_room, 0,400,0);

    keyframe(0) {
        pos(-50, 1, 0);
        look_at(0,0,0);
    };

    keyframe(20) {
        pos(-10, 1, 0);
    };

    keyframe(28);
    keyframe(29) {
        pos (0,2,0);
        euler(-20,-90,0, degrees);
    };

    keyframe(50) {
        pos($upper_room, 0,0,0);
    };
};

opaque(1.0, 0.98, 0.75)
at(-160, 0, 5)
repeat(1000, 0, 1000)
sd_column_aa(vec3(0,1,0), 50);

define_geometry(cross) {
    difference {
        onionize(0.1) {
            sd_box(vec3(3,1,1));
            sd_box(vec3(1,3,1));
            sd_box(vec3(1,1,3));
        };

        sd_box(vec3(4, 0.5, 0.5));
        sd_box(vec3(0.5, 5, 0.5));
        sd_box(vec3(0.5, 0.5, 4));
    };

    difference {
        at(0,-0.525,0) {
            sd_box(vec3(2.9, 0.025, 0.4));
            sd_box(vec3(0.4, 0.025, 2.9));
        };

        sd_box(vec3(0.8))
    };
};

define_geometry(elevators) {
    sd_box(vec3(0.4, 0.025, 0.4));
};

opaque(0.9, 0.8, 1.0)
scale(10) {
    repeat(0,40,0) {
        cross();
    };

    at(0,-1 + $t / 3 ,0)
    repeat(0,3,0)
    elevators();
};
